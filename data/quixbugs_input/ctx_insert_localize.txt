public static int bitcount(int n) { int count = 0; while (n != 0) { PAD_STATEMENT; n = (n ^ (n - 1)); count++; } return count; }	
public static boolean breadth_first_search(Node startnode, Node goalnode) { Deque<Node> queue = new ArrayDeque<>(); queue.addLast(startnode); nodesvisited.add(startnode); PAD_STATEMENT; while (true) { Node node = queue.removeFirst(); if (node == goalnode) { return true; } else { for (Node successor_node : node.getSuccessors()) { if (!nodesvisited.contains(successor_node)) { queue.addFirst(successor_node); nodesvisited.add(successor_node); } } } } }	
public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) { ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k, 0)); for (Integer x : arr) { counts.set(x, counts.get(x) + 1); } ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100); int i = 0; PAD_STATEMENT; for (Integer count : arr) { sorted_arr.addAll(Collections.nCopies(count, i)); i++; } return sorted_arr; }	
boolean search(Node node) { if (nodesvisited.contains(node)) { return false; } else if (node == goalnode) { return true; } else { PAD_STATEMENT; for (Node successornodes : node.getSuccessors()) { if (search(successornodes)) { return true; } } } return false; }	
public static boolean detect_cycle(Node node) { Node hare = node; Node tortoise = node; while (true) { PAD_STATEMENT; if (hare.getSuccessor() == null) return false; tortoise = tortoise.getSuccessor(); hare = hare.getSuccessor().getSuccessor(); if (hare == tortoise) return true; } }	
public static int find_first_in_sorted(int[] arr, int x) { int lo = 0; int hi = arr.length; PAD_STATEMENT; while (lo <= hi) { int mid = (lo + hi) / 2; if (x == arr[mid] && (mid == 0 || x != arr[mid - 1])) { return mid; } else if (x <= arr[mid]) { hi = mid; } else { lo = mid + 1; } } return -1; }	
public static int binsearch(int[] arr, int x, int start, int end) { if (start == end) { return -1; } int mid = start + (end - start) / 2; if (x < arr[mid]) { return binsearch(arr, x, start, mid); } else if (x > arr[mid]) { PAD_STATEMENT; return binsearch(arr, x, mid, end); } else { return mid; } }	

public static int gcd(int a, int b) { if (b == 0) { return a; } else { PAD_STATEMENT; return gcd(a % b, b); } }	
public static ArrayList<Integer> get_factors(int n) { if (n == 1) { return new ArrayList<Integer>(); } int max = (int) (Math.sqrt(n) + 1.0); for (int i = 2; i < max; i++) { if (n % i == 0) { ArrayList<Integer> prepend = new ArrayList<Integer>(0); prepend.add(i); prepend.addAll(get_factors(n / i)); return prepend; } } PAD_STATEMENT; return new ArrayList<Integer>(); }	
public static List<Pair<Integer, Integer>> hanoi(int height, int start, int end) { ArrayList<Pair<Integer, Integer>> steps = new ArrayList<Pair<Integer, Integer>>(); if (height > 0) { PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>(); crap_set.add(1); crap_set.add(2); crap_set.add(3); crap_set.remove(start); crap_set.remove(end); int helper = crap_set.poll(); steps.addAll(hanoi(height - 1, start, helper)); PAD_STATEMENT; steps.add(new Pair<Integer, Integer>(start, helper)); steps.addAll(hanoi(height - 1, helper, end)); } return steps; }	
public static Boolean is_valid_parenthesization(String parens) { int depth = 0; for (int i = 0; i < parens.length(); i++) { Character paren = parens.charAt(i); if (paren.equals('(')) { depth++; } else { depth--; if (depth < 0) { return false; } } } PAD_STATEMENT; return true; }	
public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) { PriorityQueue<Integer> heap = new PriorityQueue<Integer>(); for (Integer v : arr.subList(0, k)) { heap.add(v); } ArrayList<Integer> output = new ArrayList<Integer>(); PAD_STATEMENT; for (Integer x : arr) { heap.add(x); Integer popped = heap.poll(); output.add(popped); } while (!heap.isEmpty()) { output.add(heap.poll()); } return output; }	

public static Integer kth(ArrayList<Integer> arr, int k) { int pivot = arr.get(0); ArrayList<Integer> below, above; below = new ArrayList<Integer>(arr.size()); above = new ArrayList<Integer>(arr.size()); for (Integer x : arr) { if (x < pivot) { below.add(x); } else if (x > pivot) { above.add(x); } } int num_less = below.size(); int num_lessoreq = arr.size() - above.size(); if (k < num_less) { return kth(below, k); } else if (k >= num_lessoreq) { PAD_STATEMENT; return kth(above, k); } else { return pivot; } }	

public static int levenshtein(String source, String target) { if (source.isEmpty() || target.isEmpty()) { return source.isEmpty() ? target.length() : source.length(); } else if (source.charAt(0) == target.charAt(0)) { PAD_STATEMENT; return 1 + levenshtein(source.substring(1), target.substring(1)); } else { return 1 + Math.min(Math.min(levenshtein(source, target.substring(1)), levenshtein(source.substring(1), target.substring(1))), levenshtein(source.substring(1), target)); } }	
public static int lis(int[] arr) { Map<Integer, Integer> ends = new HashMap<Integer, Integer>(100); int longest = 0; int i = 0; for (int val : arr) { ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100); for (int j = 1; j < longest + 1; j++) { if (arr[ends.get(j)] < val) { prefix_lengths.add(j); } } int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0; if (length == longest || val < arr[ends.get(length + 1)]) { ends.put(length + 1, i); PAD_STATEMENT; longest = length + 1; } i++; } return longest; }	
public static String longest_common_subsequence(String a, String b) { if (a.isEmpty() || b.isEmpty()) { return ""; } else if (a.charAt(0) == b.charAt(0)) { PAD_STATEMENT; return a.charAt(0) + longest_common_subsequence(a.substring(1), b); } else { String fst = longest_common_subsequence(a, b.substring(1)); String snd = longest_common_subsequence(a.substring(1), b); return fst.length() >= snd.length() ? fst : snd; } }	
public static int max_sublist_sum(int[] arr) { int max_ending_here = 0; int max_so_far = 0; for (int x : arr) { PAD_STATEMENT; max_ending_here = max_ending_here + x; max_so_far = Math.max(max_so_far, max_ending_here); } return max_so_far; }	
public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) { PAD_STATEMENT; if (arr.size() == 0) { return arr; } else { int middle = arr.size() / 2; ArrayList<Integer> left = new ArrayList<Integer>(100); left.addAll(arr.subList(0, middle)); left = mergesort(left); ArrayList<Integer> right = new ArrayList<Integer>(100); right.addAll(arr.subList(middle, arr.size())); right = mergesort(right); return merge(left, right); } }	
public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) { Map<Node, Set<Node>> groupByNode = new HashMap<>(); Set<WeightedEdge> minSpanningTree = new HashSet<>(); Collections.sort(weightedEdges); for (WeightedEdge edge : weightedEdges) { Node vertex_u = edge.node1; Node vertex_v = edge.node2; if (!groupByNode.containsKey(vertex_u)) { groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u))); } if (!groupByNode.containsKey(vertex_v)) { groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v))); } if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) { minSpanningTree.add(edge); groupByNode = update(groupByNode, vertex_u, vertex_v); for (Node node : groupByNode.get(vertex_v)) { PAD_STATEMENT; groupByNode = update(groupByNode, node, vertex_u); } } } return minSpanningTree; }	
public static String next_palindrome(int[] digit_list) { int high_mid = Math.floorDiv(digit_list.length, 2); int low_mid = Math.floorDiv(digit_list.length - 1, 2); while (high_mid < digit_list.length && low_mid >= 0) { if (digit_list[high_mid] == 9) { digit_list[high_mid] = 0; digit_list[low_mid] = 0; high_mid += 1; low_mid -= 1; } else { digit_list[high_mid] += 1; if (low_mid != high_mid) { digit_list[low_mid] += 1; } return Arrays.toString(digit_list); } } ArrayList<Integer> otherwise = new ArrayList<Integer>(); otherwise.add(1); PAD_STATEMENT; otherwise.addAll(Collections.nCopies(digit_list.length, 0)); otherwise.add(1); return String.valueOf(otherwise); }	
public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) { for (int i = perm.size() - 2; i != -1; i--) { if (perm.get(i) < perm.get(i + 1)) { for (int j = perm.size() - 1; j != i; j--) { PAD_STATEMENT; if (perm.get(j) < perm.get(i)) { ArrayList<Integer> next_perm = perm; int temp_j = perm.get(j); int temp_i = perm.get(i); next_perm.set(i, temp_j); next_perm.set(j, temp_i); ArrayList<Integer> reversed = new ArrayList<Integer>(100); for (int k = next_perm.size() - 1; k != i; k--) { reversed.add(next_perm.get(k)); } int q = i + 1; for (Integer replace : reversed) { next_perm.set(q, replace); q++; } return next_perm; } } } } return new ArrayList<Integer>(); }	
public static ArrayList<ArrayList<Integer>> pascal(int n) { ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>(); ArrayList<Integer> init = new ArrayList<Integer>(); init.add(1); rows.add(init); for (int r = 1; r < n; r++) { ArrayList<Integer> row = new ArrayList<Integer>(); PAD_STATEMENT; for (int c = 0; c < r; c++) { int upleft, upright; if (c > 0) { upleft = rows.get(r - 1).get(c - 1); } else { upleft = 0; } if (c < r) { upright = rows.get(r - 1).get(c); } else { upright = 0; } row.add(upleft + upright); } rows.add(row); } return rows; }	
public static int possible_change(int[] coins, int total) { if (total == 0) { return 1; } PAD_STATEMENT; if (total < 0) { return 0; } int first = coins[0]; int[] rest = Arrays.copyOfRange(coins, 1, coins.length); return possible_change(coins, total - first) + possible_change(rest, total); }	
public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) { if (arr.isEmpty()) { return new ArrayList<Integer>(); } Integer pivot = arr.get(0); ArrayList<Integer> lesser = new ArrayList<Integer>(); ArrayList<Integer> greater = new ArrayList<Integer>(); for (Integer x : arr.subList(1, arr.size())) { if (x < pivot) { lesser.add(x); PAD_STATEMENT; } else if (x > pivot) { greater.add(x); } } ArrayList<Integer> middle = new ArrayList<Integer>(); middle.add(pivot); lesser = quicksort(lesser); greater = quicksort(greater); middle.addAll(greater); lesser.addAll(middle); return lesser; }	
public static Node reverse_linked_list(Node node) { Node prevnode = null; Node nextnode; while (node != null) { nextnode = node.getSuccessor(); node.setSuccessor(prevnode); PAD_STATEMENT; node = nextnode; } return prevnode; }	
public static Double rpn_eval(ArrayList tokens) { Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>(); op.put("+", (a, b) -> a + b); op.put("-", (a, b) -> a - b); op.put("*", (a, b) -> a * b); op.put("/", (a, b) -> a / b); Stack stack = new Stack(); for (Object token : tokens) { if (Double.class.isInstance(token)) { stack.push((Double) token); } else { token = (String) token; Double a = (Double) stack.pop(); Double b = (Double) stack.pop(); Double c = 0.0; BinaryOperator<Double> bin_op = op.get(token); PAD_STATEMENT; c = bin_op.apply(a, b); stack.push(c); } } return (Double) stack.pop(); }	


public static Map<String, Integer> shortest_paths(String source, Map<List<String>, Integer> weight_by_edge) { Map<String, Integer> weight_by_node = new HashMap<String, Integer>(); for (List<String> edge : weight_by_edge.keySet()) { weight_by_node.put(edge.get(1), INF); weight_by_node.put(edge.get(0), INF); } weight_by_node.put(source, 0); for (int i = 0; i < weight_by_node.size(); i++) { for (List<String> edge : weight_by_edge.keySet()) { int update_weight = Math.min(weight_by_node.get(edge.get(0)) + weight_by_edge.get(edge), weight_by_node.get(edge.get(1))); PAD_STATEMENT; weight_by_edge.put(edge, update_weight); } } return weight_by_node; }	
public static List shunting_yard(ArrayList tokens) { Map<String, Integer> precedence = new HashMap<String, Integer>(); precedence.put("+", 1); precedence.put("-", 1); precedence.put("*", 2); precedence.put("/", 2); ArrayList rpntokens = new ArrayList(100); ArrayDeque opstack = new ArrayDeque(); for (Object token : tokens) { if (Integer.class.isInstance(token)) { rpntokens.add((Integer) token); } else { String operator = (String) token; while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) { rpntokens.add(opstack.pop()); } PAD_STATEMENT; } } while (!opstack.isEmpty()) { rpntokens.add(opstack.pop()); } return rpntokens; }	
public static ArrayList<Integer> sieve(Integer max) { ArrayList<Integer> primes = new ArrayList<Integer>(); for (int n = 2; n < max + 1; n++) { PAD_STATEMENT; if (any(list_comp(n, primes))) { primes.add(n); } } return primes; }	
public static double sqrt(double x, double epsilon) { double approx = x / 2f; PAD_STATEMENT; while (Math.abs(x - approx) > epsilon) { approx = 0.5f * (approx + x / approx); } return approx; }	
public static ArrayList<ArrayList> subsequences(int a, int b, int k) { if (k == 0) { PAD_STATEMENT; return new ArrayList(); } ArrayList ret = new ArrayList(50); for (int i = a; i < b + 1 - k; i++) { ArrayList base = new ArrayList(50); for (ArrayList rest : subsequences(i + 1, b, k - 1)) { rest.add(0, i); base.add(rest); } ret.addAll(base); } return ret; }	
public static String to_base(int num, int b) { String result = ""; String alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; int i; while (num > 0) { i = num % b; num = num / b; PAD_STATEMENT; result = result + String.valueOf(alphabet.charAt(i)); } return result; }	
public static ArrayList<Node> topological_ordering(List<Node> directedGraph) { ArrayList<Node> orderedNodes = new ArrayList<Node>(); for (Node node : directedGraph) { if (node.getPredecessors().isEmpty()) { orderedNodes.add(node); } } int listSize = orderedNodes.size(); for (int i = 0; i < listSize; i++) { Node node = orderedNodes.get(i); for (Node nextNode : node.getSuccessors()) { PAD_STATEMENT; if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) { orderedNodes.add(nextNode); listSize++; } } } return orderedNodes; }	
public static ArrayList<String> wrap(String text, int cols) { ArrayList<String> lines = new ArrayList<String>(); String line; while (text.length() > cols) { int end = text.lastIndexOf(" ", cols); if (end == -1) { end = cols; } line = text.substring(0, end); text = text.substring(end); lines.add(line); } PAD_STATEMENT; return lines; }	
